name: SatOps CI / DevSecOps

on:
  push: { branches: [ "main" ] }
  pull_request: { branches: [ "main" ] }

permissions:
  contents: read
  packages: write
  security-events: write

jobs:
  secrets_scan:
    name: Secrets (Gitleaks)
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Run Gitleaks
        uses: gitleaks/gitleaks-action@v2
        with:
          args: detect --source=. --report-format sarif --report-path ${{ runner.temp }}/gitleaks.sarif
      - name: Upload SARIF
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: ${{ runner.temp }}/gitleaks.sarif

  codeql_sast:
    name: SAST (CodeQL)
    runs-on: ubuntu-latest
    permissions: { actions: read, contents: read, security-events: write }
    steps:
      - uses: actions/checkout@v4
      - uses: github/codeql-action/init@v3
        with: { languages: javascript,python }
      - uses: github/codeql-action/analyze@v3

  build_push:
    name: Build & Push
    runs-on: ubuntu-latest
    needs: [secrets_scan, codeql_sast]
    steps:
      - uses: actions/checkout@v4
      - uses: docker/setup-buildx-action@v3
      - uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - id: meta
        uses: docker/metadata-action@v5
        with:
          images: ghcr.io/${{ github.repository_owner }}/devsecops-pipeline-aws
          tags: |
            type=ref,event=branch
            type=sha,format=short,prefix=sha-
      - uses: docker/build-push-action@v6
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

  image_scan:
    name: Image Scan (Trivy)
    runs-on: ubuntu-latest
    needs: [build_push]
    steps:
      - name: Trivy image (generate SARIF)
        uses: aquasecurity/trivy-action@0.24.0
        with:
          image-ref: ghcr.io/${{ github.repository_owner }}/devsecops-pipeline-aws:${{ github.sha }}
          format: sarif
          output: trivy-image.sarif
          vuln-type: 'os,library'
          severity: 'CRITICAL,HIGH,MEDIUM'
      - name: Upload SARIF
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: trivy-image.sarif

  iac_scan:
    name: IaC (Checkov)
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: bridgecrewio/checkov-action@v12
        with:
          directory: .
          framework: terraform,kubernetes
          skip_path: .github
          soft_fail: true
          output_format: sarif
          output_file_path: checkov.sarif
      - uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: checkov.sarif

  sbom:
    name: SBOM (Syft) + Grype
    runs-on: ubuntu-latest
    needs: [build_push]
    steps:
      - name: Install syft & grype
        run: |
          curl -sSfL https://raw.githubusercontent.com/anchore/syft/main/install.sh | sh -s -- -b /usr/local/bin
          curl -sSfL https://raw.githubusercontent.com/anchore/grype/main/install.sh | sh -s -- -b /usr/local/bin
      - name: Generate SBOM
        run: syft ghcr.io/${{ github.repository_owner }}/devsecops-pipeline-aws:${{ github.sha }} -o spdx-json > sbom.spdx.json
      - name: Grype scan
        run: grype sbom:sbom.spdx.json -o sarif > grype.sarif || true
      - uses: actions/upload-artifact@v4
        with:
          name: sbom
          path: sbom.spdx.json
      - uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: grype.sarif

  deploy_dev:
    name: Deploy to dev (kubectl)
    if: github.ref == 'refs/heads/main'
    needs: [build_push, image_scan]
    runs-on: ubuntu-latest
    environment:
      name: dev
      url: http://example.local/
    steps:
      - uses: actions/checkout@v4
      - uses: azure/setup-kubectl@v4
      - name: Configure kubeconfig
        run: |
          mkdir -p $HOME/.kube
          echo "${{ secrets.KUBE_CONFIG_B64 }}" | base64 -d > $HOME/.kube/config
      - name: Update image tag in manifest
        run: sed -i "s/sha-SHORT/sha-${GITHUB_SHA:0:7}/g" k8s/deploy.yaml
      - name: Apply manifests
        run: kubectl apply -f k8s/
